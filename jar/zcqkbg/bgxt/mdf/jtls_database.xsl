<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.1">

<!-- 
!! File:        $JTLSHOME/script/xsl/database.xsl
!! Description: This stylesheet generates the files needed from the JTLS
!!              database definition. This includes the following:
!!              1) $JTLSHOME/script/dds/version<version>/
!!
!!
!!              To run this stylesheet on the jtls_database.xml file type:
!!              saxon jtls_database.xml database.xsl jtlshome=$JTLSHOME version=3.4
-->
<xsl:param name="jtlshome" select="'/home/jtlsdev'"/>
<xsl:param name="version" select="'3.4'"/>

<xsl:output method="text"/>

<xsl:variable name="cr">
  <xsl:text>
</xsl:text>
</xsl:variable>

<xsl:variable name="tab">
  <xsl:text>	</xsl:text>
</xsl:variable>

<xsl:variable name="apos">
  <xsl:text>'</xsl:text>
</xsl:variable>

<xsl:variable name="dds_script_home" select="concat($jtlshome, '/script/dds/version', $version, '/scripts')"/>
<xsl:variable name="stylehseet" select="'jtls_database.xsl'"/>


<!--
!! TEMPLATE:     match /JTLS-Database
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 17 February 2009
!! DESCRIPTION:  This is the main driver template for generating the SQL scripts
!!               for the JTLS database.
-->
<xsl:template match="/JTLS-Database">

  <!-- Create the script to create and insert records into the DDS lookup
       tables -->
<!--
  <xsl:variable name="dds_create_lu_filename" select="concat($dds_script_home, '/lootbl_create_insert.sql')"/>
  <xsl:value-of select="concat('Generating ', $dds_create_lu_filename, $cr)"/>
  <xsl:result-document method="text" href="dds_create_lu_filename">
    <xsl:call-template name="dds-create-tables">
      <xsl:with-param name="parent_node" select="./JTLS-Lookup-Tables"/>
    </xsl:call-template>
  </xsl:result-document>
-->

  <!-- Create the script to drop the DDS lookup tables -->
<!--
  <xsl:variable name="dds_drop_lu_filename" select="concat($dds_script_home, '/lootbl_drop.sql')"/>
  <xsl:value-of select="concat('Generating ', $dds_drop_lu_filename, $cr)"/>
  <xsl:result-document method="text" href="dds_drop_lu_filename">
    <xsl:call-template name="dds-drop-tables">
      <xsl:with-param name="parent_node" select="./JTLS-Lookup-Tables"/>
    </xsl:call-template>
  </xsl:result-document>
-->

  <!-- Create the script that creates the DDS data tables -->
  <xsl:variable name="dds_create_filename" select="concat($dds_script_home, '/jtls_create_tables.sql')"/>
  <xsl:value-of select="concat('Generating ', $dds_create_filename, $cr)"/>
  <xsl:result-document method="text" href="{$dds_create_filename}">
    <xsl:call-template name="dds-create-tables">
      <xsl:with-param name="parent_node" select="./JTLS-Data-Tables"/>
    </xsl:call-template>
  </xsl:result-document>

  <!-- Create the script that drops the DDS data tables -->
<!--
  <xsl:variable name="dds_drop_filename" select="concat($dds_script_home, '/jtls_drop_tables.sql')"/>
  <xsl:value-of select="concat('Generating ', $dds_drop_filename, $cr)"/>
  <xsl:result-document method="text" href="{$dds_drop_filename}">
    <xsl:call-template name="dds-drop-tables">
      <xsl:with-param name="parent_node" select="./JTLS-Data-Tables"/>
    </xsl:call-template>
  </xsl:result-document>
-->

  <!-- Create the script that creates default records in the DDS data tables -->
<!--
  <xsl:variable name="dds_default_filename" select="concat($dds_script_home, '/new_db_insert.sql')"/>
  <xsl:value-of select="concat('Generating ', $dds_default_filename, $cr)"/>
  <xsl:result-document method="text" href="{$dds_default_filename}">
    <xsl:call-template name="dds-default-inserts">
      <xsl:with-param name="parent_node" select="./JTLS-Data-Tables"/>
    </xsl:call-template>
  </xsl:result-document>
-->

</xsl:template> <!-- match /JTLS-Database -->


<!--
!! TEMPLATE:     dds-create-tables
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 17 February 2009
!! DESCRIPTION:  This template creates the SQL script to create the standard
!!               DDS data tables used by the CEP.
!! XPATH:        JTLS-Database node
-->
<xsl:template name="dds-create-tables">
  <xsl:param name="parent_node"/>

  <xsl:variable name="version" select="@version"/>

  <!-- Create the header information -->
  <xsl:value-of select="concat('-- This SQL script is automatically generated by the ', $stylehseet, $cr)"/>
  <xsl:value-of select="concat('-- stylesheet. It is is responsible for defining and creating all the tables', $cr)"/>
  <xsl:value-of select="concat('-- for a JTLS ', $version, ' database.', $cr)"/>
  <xsl:value-of select="concat('--', $cr)"/>
  <xsl:value-of select="concat('-- The following script procedure sets up defines used in this and other', $cr)"/>
  <xsl:value-of select="concat('-- script procedures. The SET VERIFY OFF command will suppress listing', $cr)"/>
  <xsl:value-of select="concat('-- substitution lines before and after the substitution.', $cr)"/>
  <xsl:value-of select="$cr"/>
  <xsl:value-of select="concat('SET VERIFY OFF', $cr)"/>
  <xsl:value-of select="concat('@@$JTLSHOME/script/dds/version', $version, '/scripts/jtls_sql_defines', $cr)"/>
  <xsl:value-of select="$cr"/>
  <xsl:value-of select="concat('-- Define the DDS scenario data tables', $cr)"/>
  <xsl:value-of select="$cr"/>

  <!-- Create each of the specified DDS tables -->
  <xsl:for-each select="$parent_node/*">
    <xsl:variable name="type" select="name()"/>

    <xsl:choose>
      <xsl:when test="$type = 'table'">
        <xsl:call-template name="print-table"/>
      </xsl:when>
      <xsl:when test="$type = 'alter'">
        <xsl:call-template name="print-alter-action"/>
      </xsl:when>
    </xsl:choose>
    <xsl:value-of select="$cr"/>
  </xsl:for-each>

</xsl:template> <!-- dds-create-tables -->


<!--
!! TEMPLATE:     print-table
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 17 February 2009
!! DESCRIPTION:  This template formats the SQL definition of a table name
!! XPATH:        table node
-->
<xsl:template name="print-table">

  <xsl:variable name="table_name" select="@name"/>
  <xsl:value-of select="concat('   CREATE TABLE ', $table_name, ' (')"/>

  <xsl:for-each select="column">

    <xsl:variable name="column_name" select="@name"/>
    <xsl:variable name="type">
      <xsl:choose>
        <xsl:when test="datatype/@typename = 'reference'">
          <xsl:value-of select="''"/>
        </xsl:when>
        <xsl:when test="datatype/@size != ''">
          <xsl:value-of select="concat(datatype/@typename, '(', datatype/@size, ')')"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="datatype/@typename"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <!-- print out information about the column -->
    <xsl:value-of select="concat($cr, '      ', $column_name)"/>
    <xsl:if test="$type != ''">
      <xsl:value-of select="concat($cr, '         ', $type)"/>
    </xsl:if>
    <xsl:if test="@default != ''">
      <xsl:value-of select="concat($cr, '         DEFAULT ', @default)"/>
    </xsl:if>
    <xsl:if test="@null = 'no'">
      <xsl:value-of select="concat($cr, '         NOT NULL')"/>
    </xsl:if>
    <xsl:if test="datatype/@typename = 'reference'">
      <xsl:variable name="constraint_name" select="concat($column_name, '_fk')"/>
      <xsl:variable name="ref_table" select="datatype/@table"/>
      <xsl:variable name="ref_column" select="datatype/@column"/>
      <xsl:value-of select="concat($cr, '         CONSTRAINT ', $constraint_name, ' REFERENCES ', $ref_table, '(', $ref_column, ')')"/>
      <xsl:if test="datatype/@cascade = 'yes'">
        <xsl:value-of select="' ON DELETE CASCADE'"/>
      </xsl:if>
    </xsl:if>

    <!-- print out the column level constraints -->
    <xsl:for-each select="constraint">
      <xsl:value-of select="$cr"/>
      <xsl:call-template name="print-constraint">
        <xsl:with-param name="spacing" select="'         '"/>
        <xsl:with-param name="terminator" select="''"/>
      </xsl:call-template>
    </xsl:for-each> <!-- column level constraint -->

    <!-- end of the column definition. Add an end of column comma if there are
         more columns, table constraints, or table primary key constraints to
         follow -->
    <xsl:if test="position() != last() or count(../constraint) > 0 or count(../column[@primary = 'yes']) > 0">
      <xsl:value-of select="','"/>
    </xsl:if>

  </xsl:for-each> <!-- column -->

  <!-- print out the primary keys as a table level constraint -->
  <xsl:if test="count(column[@primary = 'yes']) > 0">
    <xsl:variable name="pk_name" select="concat($table_name, '_pk')"/>
    <xsl:variable name="pk_list">
      <xsl:value-of select="'('"/>
      <xsl:for-each select="column[@primary = 'yes']">
        <xsl:value-of select="@name"/>
        <xsl:if test="position() != last()">
          <xsl:value-of select="', '"/>
        </xsl:if>
      </xsl:for-each>
      <xsl:value-of select="')'"/>
    </xsl:variable>

    <xsl:value-of select="concat($cr, '      CONSTRAINT ', $pk_name, ' PRIMARY KEY ', $pk_list)"/>
    <xsl:if test="count(constraint) > 0">
      <xsl:value-of select="','"/>
    </xsl:if>
  </xsl:if>

  <!-- print out the table level constraints -->
  <xsl:for-each select="constraint">
    <xsl:variable name="terminator">
      <xsl:if test="position() != last()">
        <xsl:value-of select="','"/>
      </xsl:if>
    </xsl:variable>
    <xsl:value-of select="$cr"/>
    <xsl:call-template name="print-constraint">
      <xsl:with-param name="spacing" select="'      '"/>
      <xsl:with-param name="terminator" select="$terminator"/>
    </xsl:call-template>
  </xsl:for-each> <!-- table level constraint -->
  <xsl:value-of select="concat(');', $cr)"/>

  <!-- if there are any insert actions associated with the table
       execute them -->
  <xsl:for-each select="insert">
  </xsl:for-each>

</xsl:template> <!-- print-table -->


<!--
!! TEMPLATE:     print-constraint
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 17 February 2009
!! DESCRIPTION:  This template formats the SQL constraint.
!! XPATH:        constraint node
-->
<xsl:template name="print-constraint">
  <xsl:param name="spacing"/>
  <xsl:param name="terminator"/>

  <xsl:variable name="constraint" select="@name"/>
  <xsl:variable name="type" select="@type"/>

  <xsl:choose> <!-- by constraint type -->

    <xsl:when test="$type = 'reference'">
      <xsl:variable name="fk_table" select="reference/@table"/>
      <xsl:variable name="fk_column" select="concat('(', reference/@column, ')')"/>
      <xsl:variable name="cascade">
        <xsl:if test="@cascade = 'yes'">
          <xsl:value-of select="' ON DELETE CASCADE'"/>
        </xsl:if>
      </xsl:variable>

      <xsl:value-of select="concat($spacing, 'CONSTRAINT ', $constraint, ' REFERENCES ', $fk_table, ' ', $fk_column, $cascade, $terminator)"/>
    </xsl:when>

    <xsl:when test="$type = 'fk'">
      <xsl:variable name="column_list">
        <xsl:value-of select="'('"/>
        <xsl:for-each select="column">
          <xsl:value-of select="@name"/>
          <xsl:if test="position() != last()">
            <xsl:value-of select="', '"/>
          </xsl:if>
        </xsl:for-each>
        <xsl:value-of select="')'"/>
      </xsl:variable>
      <xsl:variable name="fk_table" select="reference/@table"/>
      <xsl:variable name="fk_list">
        <xsl:value-of select="'('"/>
        <xsl:for-each select="reference/column">
          <xsl:value-of select="@name"/>
          <xsl:if test="position() != last()">
            <xsl:value-of select="', '"/>
          </xsl:if>
        </xsl:for-each>
        <xsl:value-of select="')'"/>
      </xsl:variable>
      <xsl:variable name="cascade">
        <xsl:if test="@cascade = 'yes'">
          <xsl:value-of select="' ON DELETE CASCADE'"/>
        </xsl:if>
      </xsl:variable>

      <xsl:value-of select="concat($spacing, 'CONSTRAINT ', $constraint, ' FOREIGN KEY ', $column_list, $cr)"/>
      <xsl:value-of select="concat($spacing, '      REFERENCES ', $fk_table, ' ', $fk_list, $cascade, $terminator)"/>
    </xsl:when>

    <xsl:when test="$type = 'unique'">
      <xsl:variable name="column_list">
        <xsl:if test="(count(column) > 0)">
          <xsl:value-of select="'('"/>
          <xsl:for-each select="column">
            <xsl:value-of select="@name"/>
            <xsl:if test="position() != last()">
              <xsl:value-of select="', '"/>
            </xsl:if>
          </xsl:for-each>
          <xsl:value-of select="')'"/>
        </xsl:if>
      </xsl:variable>

      <xsl:value-of select="concat($spacing, 'CONSTRAINT ', $constraint, ' UNIQUE ', $column_list, $terminator)"/>
    </xsl:when>

    <xsl:when test="$type = 'check'">
      <xsl:value-of select="concat($spacing, 'CONSTRAINT ', $constraint, ' CHECK (')"/>
      <xsl:for-each select="*">
        <xsl:call-template name="print-constraint-condition"/>
      </xsl:for-each>
      <xsl:value-of select="concat(')', $terminator)"/>
    </xsl:when>

  </xsl:choose> <!-- by constraint type -->

</xsl:template> <!-- print-constraint -->


<!--
!! TEMPLATE:     print-constraint-condition
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 17 February 2009
!! DESCRIPTION:  This template formats the condition portion of a CHECK
!!               constraint
!! XPATH:        child of constraint node
-->
<xsl:template name="print-constraint-condition">

  <xsl:variable name="check_type" select="name()"/>
  <xsl:choose> <!-- by check type -->
    <!-- junctures -->
    <xsl:when test="$check_type = 'and'">
      <xsl:value-of select="' AND '"/>
    </xsl:when>
    <xsl:when test="$check_type = 'or'">
      <xsl:value-of select="' OR '"/>
    </xsl:when>
    <xsl:when test="$check_type = 'all'">
      <xsl:value-of select="'('"/>
      <xsl:for-each select="*">
        <xsl:call-template name="print-constraint-condition"/>
      </xsl:for-each>
      <xsl:value-of select="')'"/>
    </xsl:when>

    <!-- simple conditionals -->
    <xsl:when test="$check_type = 'greater-than'">
      <xsl:value-of select="concat(@column, ' > ', @min)"/>
    </xsl:when>
    <xsl:when test="$check_type = 'greater-than-or-equal'">
      <xsl:value-of select="concat(@column, ' >= ', @min)"/>
    </xsl:when>
    <xsl:when test="$check_type = 'less-than'">
      <xsl:value-of select="concat(@column, ' &lt; ', @max)"/>
    </xsl:when>
    <xsl:when test="$check_type = 'less-than-or-equal'">
      <xsl:value-of select="concat(@column, ' &lt;= ', @max)"/>
    </xsl:when>
    <xsl:when test="$check_type = 'not-equal'">
      <xsl:value-of select="concat(@column, ' != ', @value)"/>
    </xsl:when>
    <xsl:when test="$check_type = 'equal'">
      <xsl:value-of select="concat(@column, ' == ', @value)"/>
    </xsl:when>
    <xsl:when test="$check_type = 'not-null'">
      <xsl:value-of select="concat(@column, ' IS NOT NULL')"/>
    </xsl:when>

    <!-- more complicated checks -->
    <xsl:when test="$check_type = 'between'">
      <xsl:value-of select="concat(@column, ' BETWEEN ', @min, ' AND ', @max)"/>
    </xsl:when>
    <xsl:when test="$check_type = 'translate'">
      <xsl:value-of select="concat(@column, ' = TRANSLATE(', @column, ', ', @old, ', ', @new, ')')"/>
    </xsl:when>
    <xsl:when test="$check_type = 'member-of'">
      <xsl:value-of select="concat(@column, ' IN (')"/>
      <xsl:for-each select="option">
        <xsl:value-of select="@value"/>
        <xsl:if test="position() != last()">
          <xsl:value-of select="','"/>
        </xsl:if>
      </xsl:for-each>
      <xsl:value-of select="')'"/>
    </xsl:when>

  </xsl:choose> <!-- by check type -->

</xsl:template> <!-- print-constraint-condition -->


<!--
!! TEMPLATE:     print-alter-action
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 17 February 2009
!! DESCRIPTION:  This template prints the SQL for a table alter
!! XPATH:        alter node
-->
<xsl:template name="print-alter-action">

  <xsl:variable name="table" select="@table"/>
  <xsl:variable name="action" select="@action"/>
  <xsl:choose> <!-- the action type -->

    <!-- take care of an add constraint action -->
    <xsl:when test="$action = 'add-constraint'">
      <xsl:value-of select="concat('   ALTER TABLE ', $table, ' ADD', $cr)"/>
      <xsl:for-each select="*">
        <xsl:variable name="node_type" select="name()"/>
        <xsl:choose>
          <xsl:when test="$node_type = 'constraint'">
            <xsl:call-template name="print-constraint">
              <xsl:with-param name="spacing" select="'      '"/>
              <xsl:with-param name="terminator" select="''"/>
            </xsl:call-template>
          </xsl:when>
        </xsl:choose>
      </xsl:for-each>
      <xsl:value-of select="concat(';', $cr)"/>
    </xsl:when>

    <!-- take care of an insert action -->
    <xsl:when test="$action = 'insert'">
      <xsl:for-each select="entry">
        <xsl:value-of select="concat('   INSERT INTO ', $table, ' VALUES (')"/>
        <xsl:for-each select="./@*">
          <xsl:value-of select="."/>
          <xsl:if test="position() != last()">
            <xsl:value-of select="', '"/>
          </xsl:if>
        </xsl:for-each>
        <xsl:value-of select="concat(');', $cr)"/>
      </xsl:for-each>
      <xsl:value-of select="concat('   COMMIT;', $cr)"/>
    </xsl:when>

  </xsl:choose> <!-- the action type -->

</xsl:template> <!-- print-alter-action -->


<!--
!! TEMPLATE:     dds-drop-tables
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 17 February 2009
!! DESCRIPTION:  This template creates the SQL script to create the standard
!!               DDS data tables used by the CEP.
!! XPATH:        JTLS-Database node
-->
<xsl:template name="dds-drop-tables">
  <xsl:param name="parent_node"/>

  <xsl:variable name="version" select="@version"/>

  <!-- Create the header information -->
  <xsl:value-of select="concat('-- This sql script is automatically generated by the ', $stylehseet, $cr)"/>
  <xsl:value-of select="concat('-- stylesheet. It is is responsible for dropping all the tables for', $cr)"/>
  <xsl:value-of select="concat('-- a JTLS ', $version, ' database.', $cr)"/>
  <xsl:value-of select="$cr"/>
  <xsl:value-of select="concat('SET TERMOUT OFF;', $cr)"/>
  <xsl:value-of select="$cr"/>

  <!-- Drop each of the specified DDS tables in reverse order -->
  <xsl:for-each select="$parent_node/table">
    <xsl:sort select="position()" data-type="number" order="descending"/>

    <!-- Determine if there are any alter actions on the table -->
    <xsl:variable name="table" select="@name"/>
    <xsl:variable name="cascade">
      <xsl:if test="count(/JTLS-Database/JTLS-Data-Tables/alter/constraint/reference[@table = $table]) > 0">
        <xsl:value-of select="' CASCADE CONSTRAINT'"/>
      </xsl:if>
    </xsl:variable>

    <xsl:value-of select="concat('DROP TABLE ', @name, $cascade, ';', $cr)"/>
  </xsl:for-each>

  <xsl:value-of select="concat($cr, 'SET TERMOUT ON;', $cr)"/>

</xsl:template> <!-- dds-drop-tables -->


<!--
!! TEMPLATE:     dds-default-inserts
!! PROGRAMMER:   Rick Kalinyak
!! DATE CREATED: 20 August 2009
!! DESCRIPTION:  This template creates the SQL script that inserts default
!!               records into the DDS database. These default records are
!!               defined by <alter table="" action="default"/> tags.
!! XPATH:        JTLS-Database node
-->
<xsl:template name="dds-default-inserts">
  <xsl:param name="parent_node"/>

  <xsl:variable name="version" select="@version"/>

  <!-- Create the header information -->
  <xsl:value-of select="concat('-- This sql script is automatically generated by the ', $stylehseet, $cr)"/>
  <xsl:value-of select="concat('-- stylesheet. It is is responsible for creating default records for', $cr)"/>
  <xsl:value-of select="concat('-- a JTLS ', $version, ' database.', $cr)"/>
  <xsl:value-of select="$cr"/>

  <!-- Each alter tag with an action attribute of default should contain one
       or more entries -->
  <xsl:for-each select="$parent_node/alter[@action='default']">
    <xsl:variable name="table_name" select="@table"/>
    <xsl:for-each select="entry">

      <xsl:value-of select="concat('INSERT INTO ', $table_name, ' (')"/>
      <xsl:for-each select="@*">
        <xsl:value-of select="name()"/>
        <xsl:if test="position() != last()">
          <xsl:value-of select="', '"/>
        </xsl:if>
      </xsl:for-each> <!-- attribute name -->
      <xsl:value-of select="concat(')', $cr)"/>

      <xsl:value-of select="'       VALUES('"/>
      <xsl:for-each select="@*">
        <xsl:value-of select="."/>
        <xsl:if test="position() != last()">
          <xsl:value-of select="', '"/>
        </xsl:if>
      </xsl:for-each> <!-- attribute value -->
      <xsl:value-of select="concat(');', $cr)"/>

    </xsl:for-each> <!-- entry tag -->
    <xsl:value-of select="concat('COMMIT;', $cr, $cr)"/>
  </xsl:for-each> <!-- alter tag with an action attribute of default -->

  <xsl:value-of select="concat('-- Do not use QUIT here, load_stamp script will be executed after this one', $cr)"/>

</xsl:template> <!-- dds-default-inserts -->

</xsl:stylesheet>
